//- security  //완료 추가수정
-개인로그인이 맞지만 관리자 , 사용자 로그인 나누기? //완료
-auth 2.0 로그인이 곧 회원가입//카카오,네이버 성공 , 세션값 받아오기 성공 // 구글
아이디,휴대폰번호 중복값 처리 // 완료
회원가입 ui 변경 // 완료
-휴대폰으로 아이디,비밀번호 찾기 // 아이디 완료 // 비밀번호 개설중
-결제 -nhn ,카카오톡 등
-자바 컴파일러 // 완료... - 아이디 , 문제 별 폴더에 넣기
-컴파일러 ui 개선// 
-좀더 세부적으로(권한 여러개 넣기?) 완벽하게 (필터 써보기)
-aws 사용 및 배포
-게시판 하나 만들기(라이브러리 사용하는 것으로)
-jpa 사용?

-웹소컷 실시간 채팅(서버1개 서버2개)



-카프카



인증번호3분만료(쓰레드or db에 3분후 expire , js(interval)로 시간초), uuid
회원가입시 중복 아이디 및 패턴적용 (서버재시작시 값 다시 가져오기)	
아이디,비밀번호찾기 ui

public class VerificationCodeManager {
    private Map<String, Instant> verificationCodes = new HashMap<>();
    private static final long EXPIRATION_TIME_SECONDS = 3 * 60;

    public String generateVerificationCode(String userId) {
        // 인증번호 생성
        String verificationCode = generateRandomCode();
        
        // 현재 시간 저장
        Instant currentTime = Instant.now();
        verificationCodes.put(userId, currentTime);
        
        return verificationCode;
    }

    public boolean verifyVerificationCode(String userId, String code) {
        // 저장된 시간 가져오기
        Instant savedTime = verificationCodes.get(userId);
        if (savedTime == null) {
            return false; // 저장된 시간이 없으면 인증 실패
        }
        
        // 현재 시간과 저장된 시간의 차이 계산 (초 단위)
        long elapsedTimeSeconds = Instant.now().getEpochSecond() - savedTime.getEpochSecond();
        
        // 차이가 3분(180초) 이상이면 만료
        return elapsedTimeSeconds <= EXPIRATION_TIME_SECONDS && codeIsValid(code);
    }

    private boolean codeIsValid(String code) {
        // 여기서 코드의 유효성을 추가로 검사할 수 있음 (예: 길이, 문자열 패턴 등)
        return true;
    }

    private String generateRandomCode() {
        // 여기서 랜덤한 인증번호를 생성할 수 있음
        return "123456"; // 예시로 123456 사용
    }
}